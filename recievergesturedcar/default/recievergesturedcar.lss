
recievergesturedcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e6  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e6  00000000  00000000  00000387  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020b  00000000  00000000  0000046d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000df  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000190  00000000  00000000  00000777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
void main()
{
  92:	17 ba       	out	0x17, r1	; 23
   DDRB=0x00;
   DDRC=0xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 bb       	out	0x14, r24	; 20
   PORTB=0b11110000;
  98:	80 ef       	ldi	r24, 0xF0	; 240
  9a:	88 bb       	out	0x18, r24	; 24
  
   while(1)
   {
         if((PINB &0b11110000)==0b10100000)
		  {    
		           PORTC=0b10100000;
  9c:	70 ea       	ldi	r23, 0xA0	; 160
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	28 ec       	ldi	r18, 0xC8	; 200
  a0:	30 e0       	ldi	r19, 0x00	; 0
				   }
				

            if((PINB &0b11110000)==0b01010000)
			 {
			         PORTC=0b01010000;
  a2:	60 e5       	ldi	r22, 0x50	; 80
					 _delay_ms(100);
					 }
					 
            if((PINB &0b11110000)==0b00010000)
			  {
			        PORTC=0b00010000;
  a4:	50 e1       	ldi	r21, 0x10	; 16
					_delay_ms(100);
					}
					
			if((PINB &0b11110000)==0b00100000)
			 {       
			           PORTC=0b00100000;
  a6:	40 e2       	ldi	r20, 0x20	; 32
   DDRC=0xff;
   PORTB=0b11110000;
  
   while(1)
   {
         if((PINB &0b11110000)==0b10100000)
  a8:	86 b3       	in	r24, 0x16	; 22
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	80 3a       	cpi	r24, 0xA0	; 160
  ae:	41 f4       	brne	.+16     	; 0xc0 <main+0x2e>
		  {    
		           PORTC=0b10100000;
  b0:	75 bb       	out	0x15, r23	; 21
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <main+0x24>
				   _delay_ms(100);
				   }
				

            if((PINB &0b11110000)==0b01010000)
  c0:	86 b3       	in	r24, 0x16	; 22
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	80 35       	cpi	r24, 0x50	; 80
  c6:	41 f4       	brne	.+16     	; 0xd8 <main+0x46>
			 {
			         PORTC=0b01010000;
  c8:	65 bb       	out	0x15, r22	; 21
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <main+0x3c>
					 _delay_ms(100);
					 }
					 
            if((PINB &0b11110000)==0b00010000)
  d8:	86 b3       	in	r24, 0x16	; 22
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	80 31       	cpi	r24, 0x10	; 16
  de:	41 f4       	brne	.+16     	; 0xf0 <main+0x5e>
			  {
			        PORTC=0b00010000;
  e0:	55 bb       	out	0x15, r21	; 21
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	f9 01       	movw	r30, r18
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x54>
					_delay_ms(100);
					}
					
			if((PINB &0b11110000)==0b00100000)
  f0:	86 b3       	in	r24, 0x16	; 22
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	80 32       	cpi	r24, 0x20	; 32
  f6:	49 f4       	brne	.+18     	; 0x10a <main+0x78>
			 {       
			           PORTC=0b00100000;
  f8:	45 bb       	out	0x15, r20	; 21
  fa:	88 ee       	ldi	r24, 0xE8	; 232
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0x6c>
 108:	cf cf       	rjmp	.-98     	; 0xa8 <main+0x16>
					   _delay_ms(100);
					   }
					   else
					   PORTC=0x00;		 
 10a:	15 ba       	out	0x15, r1	; 21
 10c:	cd cf       	rjmp	.-102    	; 0xa8 <main+0x16>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
